// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: biddybidder.proto

package biddybidderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResponsiblePotentialBuyer_Bid_FullMethodName             = "/ResponsiblePotentialBuyer/Bid"
	ResponsiblePotentialBuyer_OngoingAuctions_FullMethodName = "/ResponsiblePotentialBuyer/OngoingAuctions"
	ResponsiblePotentialBuyer_StartFunction_FullMethodName   = "/ResponsiblePotentialBuyer/StartFunction"
)

// ResponsiblePotentialBuyerClient is the client API for ResponsiblePotentialBuyer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponsiblePotentialBuyerClient interface {
	// A client sends a message to the chat
	Bid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error)
	// A client receives broadcasted messages
	OngoingAuctions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Auctions, error)
	// Start function wow
	StartFunction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessStart, error)
}

type responsiblePotentialBuyerClient struct {
	cc grpc.ClientConnInterface
}

func NewResponsiblePotentialBuyerClient(cc grpc.ClientConnInterface) ResponsiblePotentialBuyerClient {
	return &responsiblePotentialBuyerClient{cc}
}

func (c *responsiblePotentialBuyerClient) Bid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ResponsiblePotentialBuyer_Bid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsiblePotentialBuyerClient) OngoingAuctions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Auctions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auctions)
	err := c.cc.Invoke(ctx, ResponsiblePotentialBuyer_OngoingAuctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsiblePotentialBuyerClient) StartFunction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessStart, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessStart)
	err := c.cc.Invoke(ctx, ResponsiblePotentialBuyer_StartFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponsiblePotentialBuyerServer is the server API for ResponsiblePotentialBuyer service.
// All implementations must embed UnimplementedResponsiblePotentialBuyerServer
// for forward compatibility.
type ResponsiblePotentialBuyerServer interface {
	// A client sends a message to the chat
	Bid(context.Context, *Bid) (*Ack, error)
	// A client receives broadcasted messages
	OngoingAuctions(context.Context, *Empty) (*Auctions, error)
	// Start function wow
	StartFunction(context.Context, *Empty) (*SuccessStart, error)
	mustEmbedUnimplementedResponsiblePotentialBuyerServer()
}

// UnimplementedResponsiblePotentialBuyerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResponsiblePotentialBuyerServer struct{}

func (UnimplementedResponsiblePotentialBuyerServer) Bid(context.Context, *Bid) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedResponsiblePotentialBuyerServer) OngoingAuctions(context.Context, *Empty) (*Auctions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OngoingAuctions not implemented")
}
func (UnimplementedResponsiblePotentialBuyerServer) StartFunction(context.Context, *Empty) (*SuccessStart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFunction not implemented")
}
func (UnimplementedResponsiblePotentialBuyerServer) mustEmbedUnimplementedResponsiblePotentialBuyerServer() {
}
func (UnimplementedResponsiblePotentialBuyerServer) testEmbeddedByValue() {}

// UnsafeResponsiblePotentialBuyerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponsiblePotentialBuyerServer will
// result in compilation errors.
type UnsafeResponsiblePotentialBuyerServer interface {
	mustEmbedUnimplementedResponsiblePotentialBuyerServer()
}

func RegisterResponsiblePotentialBuyerServer(s grpc.ServiceRegistrar, srv ResponsiblePotentialBuyerServer) {
	// If the following call pancis, it indicates UnimplementedResponsiblePotentialBuyerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResponsiblePotentialBuyer_ServiceDesc, srv)
}

func _ResponsiblePotentialBuyer_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsiblePotentialBuyerServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponsiblePotentialBuyer_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsiblePotentialBuyerServer).Bid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsiblePotentialBuyer_OngoingAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsiblePotentialBuyerServer).OngoingAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponsiblePotentialBuyer_OngoingAuctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsiblePotentialBuyerServer).OngoingAuctions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsiblePotentialBuyer_StartFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsiblePotentialBuyerServer).StartFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResponsiblePotentialBuyer_StartFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsiblePotentialBuyerServer).StartFunction(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponsiblePotentialBuyer_ServiceDesc is the grpc.ServiceDesc for ResponsiblePotentialBuyer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponsiblePotentialBuyer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResponsiblePotentialBuyer",
	HandlerType: (*ResponsiblePotentialBuyerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bid",
			Handler:    _ResponsiblePotentialBuyer_Bid_Handler,
		},
		{
			MethodName: "OngoingAuctions",
			Handler:    _ResponsiblePotentialBuyer_OngoingAuctions_Handler,
		},
		{
			MethodName: "StartFunction",
			Handler:    _ResponsiblePotentialBuyer_StartFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "biddybidder.proto",
}
